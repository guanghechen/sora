import type { IBatchDisposable } from '../src'
import { BatchDisposable, Disposable, disposeAll, isDisposable } from '../src'

test('isDisposable', () => {
  expect(isDisposable(null)).toEqual(false)
  expect(isDisposable(undefined)).toEqual(false)
  expect(isDisposable({})).toEqual(false)
  expect(isDisposable({ dispose: () => {} })).toEqual(false)
  expect(isDisposable({ disposed: false })).toEqual(false)
  expect(isDisposable({ dispose: () => {}, disposed: false })).toEqual(true)
  expect(isDisposable({ dispose: () => {}, disposed: true })).toEqual(true)
  expect(isDisposable(new Disposable(() => {}))).toEqual(true)
  expect(isDisposable(new BatchDisposable())).toEqual(true)
})

describe('disposeAll', () => {
  it('no error', () => {
    const disposable1 = new Disposable(() => {})
    const disposable2 = new Disposable(() => {})
    const disposable3 = new Disposable(() => {})
    const disposable4 = new Disposable(() => {})
    const disposable5 = new Disposable(() => {})

    expect(disposable1.disposed).toEqual(false)
    expect(disposable2.disposed).toEqual(false)
    expect(disposable3.disposed).toEqual(false)
    expect(disposable4.disposed).toEqual(false)
    expect(disposable5.disposed).toEqual(false)

    disposeAll([disposable1, disposable2, disposable3, disposable4, disposable5])
    expect(disposable1.disposed).toEqual(true)
    expect(disposable2.disposed).toEqual(true)
    expect(disposable3.disposed).toEqual(true)
    expect(disposable4.disposed).toEqual(true)
    expect(disposable5.disposed).toEqual(true)

    disposeAll([disposable1, disposable2, disposable3, disposable4, disposable5])
    expect(disposable1.disposed).toEqual(true)
    expect(disposable2.disposed).toEqual(true)
    expect(disposable3.disposed).toEqual(true)
    expect(disposable4.disposed).toEqual(true)
    expect(disposable5.disposed).toEqual(true)
  })

  it('one error', () => {
    const disposable1 = new Disposable(() => {})
    const disposable2 = new Disposable(() => {
      throw new Error('waw')
    })
    const disposable3 = new Disposable(() => {})
    const disposable4 = new Disposable(() => {})
    const disposable5 = new Disposable(() => {})

    expect(disposable1.disposed).toEqual(false)
    expect(disposable2.disposed).toEqual(false)
    expect(disposable3.disposed).toEqual(false)
    expect(disposable4.disposed).toEqual(false)
    expect(disposable5.disposed).toEqual(false)

    expect(() =>
      disposeAll([disposable1, disposable2, disposable3, disposable4, disposable5]),
    ).toThrow('waw')
    expect(disposable1.disposed).toEqual(true)
    expect(disposable2.disposed).toEqual(true)
    expect(disposable3.disposed).toEqual(true)
    expect(disposable4.disposed).toEqual(true)
    expect(disposable5.disposed).toEqual(true)

    disposeAll([disposable1, disposable2, disposable3, disposable4, disposable5])
    expect(disposable1.disposed).toEqual(true)
    expect(disposable2.disposed).toEqual(true)
    expect(disposable3.disposed).toEqual(true)
    expect(disposable4.disposed).toEqual(true)
    expect(disposable5.disposed).toEqual(true)
  })

  it('multiple errors', () => {
    const disposable1 = new Disposable(() => {})
    const disposable2 = new Disposable(() => {
      throw new Error('waw1')
    })
    const disposable3 = new Disposable(() => {})
    const disposable4 = new Disposable(() => {
      throw new Error('waw2')
    })
    const disposable5 = new Disposable(() => {})

    expect(disposable1.disposed).toEqual(false)
    expect(disposable2.disposed).toEqual(false)
    expect(disposable3.disposed).toEqual(false)
    expect(disposable4.disposed).toEqual(false)
    expect(disposable5.disposed).toEqual(false)

    expect(() =>
      disposeAll([disposable1, disposable2, disposable3, disposable4, disposable5]),
    ).toThrow('Encountered errors while disposing')
    expect(disposable1.disposed).toEqual(true)
    expect(disposable2.disposed).toEqual(true)
    expect(disposable3.disposed).toEqual(true)
    expect(disposable4.disposed).toEqual(true)
    expect(disposable5.disposed).toEqual(true)

    disposeAll([disposable1, disposable2, disposable3, disposable4, disposable5])
    expect(disposable1.disposed).toEqual(true)
    expect(disposable2.disposed).toEqual(true)
    expect(disposable3.disposed).toEqual(true)
    expect(disposable4.disposed).toEqual(true)
    expect(disposable5.disposed).toEqual(true)
  })
})

describe('BatchDisposable', () => {
  it('no error', () => {
    const disposable: IBatchDisposable = new BatchDisposable()
    const disposable1 = new Disposable(() => {})
    const disposable2 = new Disposable(() => {})
    const disposable3 = new Disposable(() => {})
    const disposable4 = new Disposable(() => {})
    const disposable5 = new Disposable(() => {})
    const disposable6 = new Disposable(() => {})
    disposable5.dispose()
    disposable.registerDisposable(disposable1)
    disposable.registerDisposable(disposable2)
    disposable.registerDisposable(disposable3)
    disposable.registerDisposable(disposable4)
    disposable.registerDisposable(disposable5)

    expect(disposable.disposed).toEqual(false)
    expect(disposable1.disposed).toEqual(false)
    expect(disposable2.disposed).toEqual(false)
    expect(disposable3.disposed).toEqual(false)
    expect(disposable4.disposed).toEqual(false)
    expect(disposable5.disposed).toEqual(true)
    expect(disposable6.disposed).toEqual(false)

    disposable.dispose()
    expect(disposable.disposed).toEqual(true)
    expect(disposable1.disposed).toEqual(true)
    expect(disposable2.disposed).toEqual(true)
    expect(disposable3.disposed).toEqual(true)
    expect(disposable4.disposed).toEqual(true)
    expect(disposable5.disposed).toEqual(true)
    expect(disposable6.disposed).toEqual(false)

    disposable.registerDisposable(disposable6)
    expect(disposable6.disposed).toEqual(true)

    disposable.dispose()
    expect(disposable.disposed).toEqual(true)
    expect(disposable1.disposed).toEqual(true)
    expect(disposable2.disposed).toEqual(true)
    expect(disposable3.disposed).toEqual(true)
    expect(disposable4.disposed).toEqual(true)
    expect(disposable5.disposed).toEqual(true)
    expect(disposable6.disposed).toEqual(true)
  })

  it('one error', () => {
    const disposable: IBatchDisposable = new BatchDisposable()
    const disposable1 = new Disposable(() => {})
    const disposable2 = new Disposable(() => {
      throw new Error('waw')
    })
    const disposable3 = new Disposable(() => {})
    const disposable4 = new Disposable(() => {})
    const disposable5 = new Disposable(() => {})
    const disposable6 = new Disposable(() => {})
    disposable5.dispose()
    disposable.registerDisposable(disposable1)
    disposable.registerDisposable(disposable2)
    disposable.registerDisposable(disposable3)
    disposable.registerDisposable(disposable4)
    disposable.registerDisposable(disposable5)

    expect(disposable.disposed).toEqual(false)
    expect(disposable1.disposed).toEqual(false)
    expect(disposable2.disposed).toEqual(false)
    expect(disposable3.disposed).toEqual(false)
    expect(disposable4.disposed).toEqual(false)
    expect(disposable5.disposed).toEqual(true)
    expect(disposable6.disposed).toEqual(false)

    expect(() => disposable.dispose()).toThrow('waw')
    expect(disposable.disposed).toEqual(true)
    expect(disposable1.disposed).toEqual(true)
    expect(disposable2.disposed).toEqual(true)
    expect(disposable3.disposed).toEqual(true)
    expect(disposable4.disposed).toEqual(true)
    expect(disposable5.disposed).toEqual(true)
    expect(disposable6.disposed).toEqual(false)

    disposable.registerDisposable(disposable6)
    expect(disposable6.disposed).toEqual(true)

    disposable.dispose()
    expect(disposable.disposed).toEqual(true)
    expect(disposable1.disposed).toEqual(true)
    expect(disposable2.disposed).toEqual(true)
    expect(disposable3.disposed).toEqual(true)
    expect(disposable4.disposed).toEqual(true)
    expect(disposable5.disposed).toEqual(true)
    expect(disposable6.disposed).toEqual(true)
  })

  it('multiple errors', () => {
    const disposable: IBatchDisposable = new BatchDisposable()
    const disposable1 = new Disposable(() => {})
    const disposable2 = new Disposable(() => {
      throw new Error('waw1')
    })
    const disposable3 = new Disposable(() => {})
    const disposable4 = new Disposable(() => {
      throw new Error('waw2')
    })
    const disposable5 = new Disposable(() => {})
    const disposable6 = new Disposable(() => {})
    disposable5.dispose()
    disposable.registerDisposable(disposable1)
    disposable.registerDisposable(disposable2)
    disposable.registerDisposable(disposable3)
    disposable.registerDisposable(disposable4)
    disposable.registerDisposable(disposable5)

    expect(disposable.disposed).toEqual(false)
    expect(disposable1.disposed).toEqual(false)
    expect(disposable2.disposed).toEqual(false)
    expect(disposable3.disposed).toEqual(false)
    expect(disposable4.disposed).toEqual(false)
    expect(disposable5.disposed).toEqual(true)
    expect(disposable6.disposed).toEqual(false)

    expect(() => disposable.dispose()).toThrow('Encountered errors while disposing')
    expect(disposable.disposed).toEqual(true)
    expect(disposable1.disposed).toEqual(true)
    expect(disposable2.disposed).toEqual(true)
    expect(disposable3.disposed).toEqual(true)
    expect(disposable4.disposed).toEqual(true)
    expect(disposable5.disposed).toEqual(true)

    disposable.registerDisposable(disposable6)
    expect(disposable6.disposed).toEqual(true)

    disposable.dispose()
    expect(disposable.disposed).toEqual(true)
    expect(disposable1.disposed).toEqual(true)
    expect(disposable2.disposed).toEqual(true)
    expect(disposable3.disposed).toEqual(true)
    expect(disposable4.disposed).toEqual(true)
    expect(disposable5.disposed).toEqual(true)
    expect(disposable6.disposed).toEqual(true)
  })
})
